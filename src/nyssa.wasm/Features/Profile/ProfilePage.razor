@page "/profile"
@attribute [Authorize]
@using Nyssa.Wasm.Features.Authentication
@inject AuthenticationStateService AuthStateService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Profile - Nyssa</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        @if (authState.IsAuthenticated && authState.User != null)
        {
            <!-- Profile Header -->
            <div class="bg-white shadow rounded-lg mb-6">
                <div class="px-6 py-8">
                    <div class="flex items-center space-x-6">
                        <div class="flex-shrink-0">
                            @if (!string.IsNullOrEmpty(authState.User.ProfilePictureUrl))
                            {
                                <img class="h-20 w-20 rounded-full" src="@authState.User.ProfilePictureUrl" alt="@authState.User.FullName" />
                            }
                            else
                            {
                                <div class="h-20 w-20 rounded-full bg-indigo-500 flex items-center justify-center">
                                    <span class="text-xl font-medium text-white">@authState.User.Initials</span>
                                </div>
                            }
                        </div>
                        <div class="flex-1">
                            <h1 class="text-2xl font-bold text-gray-900">@authState.User.FullName</h1>
                            <p class="text-sm text-gray-500">@authState.User.Email</p>
                            <p class="text-xs text-gray-400 mt-1">Member since @authState.User.CreatedAt.ToString("MMMM yyyy")</p>
                        </div>
                        <div>
                            @if (isEditing)
                            {
                                <div class="flex space-x-2">
                                    <button @onclick="SaveProfile" disabled="@isSaving" class="btn btn-primary">
                                        @if (isSaving)
                                        {
                                            <span>Saving...</span>
                                        }
                                        else
                                        {
                                            <span>Save</span>
                                        }
                                    </button>
                                    <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <button @onclick="StartEdit" class="btn btn-primary">Edit Profile</button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Profile Information -->
            <div class="bg-white shadow rounded-lg mb-6">
                <div class="px-6 py-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Profile Information</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">First Name</label>
                            @if (isEditing)
                            {
                                <input @bind="editedProfile.FirstName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                            }
                            else
                            {
                                <p class="mt-1 text-sm text-gray-900">@authState.User.FirstName</p>
                            }
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Last Name</label>
                            @if (isEditing)
                            {
                                <input @bind="editedProfile.LastName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                            }
                            else
                            {
                                <p class="mt-1 text-sm text-gray-900">@authState.User.LastName</p>
                            }
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Email</label>
                            <p class="mt-1 text-sm text-gray-900">@authState.User.Email</p>
                            <p class="mt-1 text-xs text-gray-500">Email cannot be changed</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">User ID</label>
                            <p class="mt-1 text-sm text-gray-900 font-mono">@authState.User.Id</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Organization Selection -->
            <div class="bg-white shadow rounded-lg mb-6">
                <div class="px-6 py-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Organization</h2>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Current Organization</label>
                            <div class="mt-1 flex items-center justify-between p-3 border border-gray-300 rounded-md bg-gray-50">
                                <div>
                                    <p class="text-sm font-medium text-gray-900">@currentOrganization.Name</p>
                                    <p class="text-xs text-gray-500">@currentOrganization.Id</p>
                                </div>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    Active
                                </span>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Switch Organization</label>
                            <select @onchange="OnOrganizationChange" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                <option value="">Select an organization...</option>
                                @foreach (var org in availableOrganizations)
                                {
                                    <option value="@org.Id">@org.Name</option>
                                }
                            </select>
                            <p class="mt-1 text-xs text-gray-500">
                                Switching organizations will exchange your current token for access to the selected organization.
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Access Token Details -->
            <div class="bg-white shadow rounded-lg mb-6">
                <div class="px-6 py-4">
                    <button @onclick="() => showAccessToken = !showAccessToken" class="flex items-center justify-between w-full text-left">
                        <h2 class="text-lg font-medium text-gray-900">Access Token Details</h2>
                        <svg class="h-5 w-5 text-gray-400 transform transition-transform @(showAccessToken ? "rotate-180" : "")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                    </button>
                    @if (showAccessToken)
                    {
                        <div class="mt-4 space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Token (truncated)</label>
                                <div class="mt-1 flex">
                                    <code class="flex-1 text-xs bg-gray-100 p-2 rounded-l-md border border-r-0 border-gray-300 font-mono break-all">
                                        @(authState.AccessToken?.Length > 100 ? authState.AccessToken[..50] + "..." + authState.AccessToken[^50..] : authState.AccessToken ?? "No token")
                                    </code>
                                    <button @onclick="() => CopyToClipboard(authState.AccessToken ?? string.Empty)" class="px-3 py-2 bg-gray-50 border border-gray-300 rounded-r-md text-sm text-gray-700 hover:bg-gray-100">
                                        Copy
                                    </button>
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Expires At</label>
                                <p class="mt-1 text-sm text-gray-900">
                                    @(authState.TokenExpiresAt?.ToString("yyyy-MM-dd HH:mm:ss UTC") ?? "Unknown")
                                    @if (authState.TokenExpiresAt.HasValue)
                                    {
                                        var timeLeft = authState.TokenExpiresAt.Value - DateTime.UtcNow;
                                        <span class="ml-2 text-xs @(timeLeft.TotalHours < 1 ? "text-red-600" : "text-gray-500")">
                                            (@(timeLeft.TotalHours > 0 ? $"{timeLeft.TotalHours:F0}h {timeLeft.Minutes}m left" : "Expired"))
                                        </span>
                                    }
                                </p>
                            </div>
                            @if (accessTokenClaims != null)
                            {
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Token Claims</label>
                                    <div class="bg-gray-50 rounded-md p-3 max-h-60 overflow-y-auto">
                                        <pre class="text-xs text-gray-800 whitespace-pre-wrap">@accessTokenClaims</pre>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- ID Token Details -->
            @if (!string.IsNullOrEmpty(idToken))
            {
                <div class="bg-white shadow rounded-lg mb-6">
                    <div class="px-6 py-4">
                        <button @onclick="() => showIdToken = !showIdToken" class="flex items-center justify-between w-full text-left">
                            <h2 class="text-lg font-medium text-gray-900">ID Token Details</h2>
                            <svg class="h-5 w-5 text-gray-400 transform transition-transform @(showIdToken ? "rotate-180" : "")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                        @if (showIdToken)
                        {
                            <div class="mt-4 space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Token (truncated)</label>
                                    <div class="mt-1 flex">
                                        <code class="flex-1 text-xs bg-gray-100 p-2 rounded-l-md border border-r-0 border-gray-300 font-mono break-all">
                                            @(idToken.Length > 100 ? idToken[..50] + "..." + idToken[^50..] : idToken)
                                        </code>
                                        <button @onclick="() => CopyToClipboard(idToken)" class="px-3 py-2 bg-gray-50 border border-gray-300 rounded-r-md text-sm text-gray-700 hover:bg-gray-100">
                                            Copy
                                        </button>
                                    </div>
                                </div>
                                @if (idTokenClaims != null)
                                {
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Token Claims</label>
                                        <div class="bg-gray-50 rounded-md p-3 max-h-60 overflow-y-auto">
                                            <pre class="text-xs text-gray-800 whitespace-pre-wrap">@idTokenClaims</pre>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Session Information -->
            <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Session Information</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Last Updated</label>
                            <p class="mt-1 text-sm text-gray-900">@authState.User.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Session Status</label>
                            <span class="mt-1 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Active
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <p class="text-gray-500">You must be logged in to view your profile.</p>
                <button @onclick="GoToLogin" class="mt-4 btn btn-primary">Go to Login</button>
            </div>
        }
    </div>
</div>

@code {
    private Authentication.AuthenticationState authState = new();
    private UserProfile editedProfile = new();
    private bool isEditing = false;
    private bool isSaving = false;
    private bool showAccessToken = false;
    private bool showIdToken = false;
    private string? idToken;
    private string? accessTokenClaims;
    private string? idTokenClaims;

    // Mock organization data - replace with real data from service
    private Organization currentOrganization = new() { Id = "org_current", Name = "Current Organization" };
    private List<Organization> availableOrganizations = new()
    {
        new() { Id = "org_1", Name = "Acme Corporation" },
        new() { Id = "org_2", Name = "TechStart Inc." },
        new() { Id = "org_3", Name = "Innovation Labs" }
    };

    protected override async Task OnInitializedAsync()
    {
        await AuthStateService.InitializeAsync();
        authState = AuthStateService.GetAuthState();
        
        if (authState.User != null)
        {
            editedProfile = new UserProfile
            {
                Id = authState.User.Id,
                Email = authState.User.Email,
                FirstName = authState.User.FirstName,
                LastName = authState.User.LastName,
                ProfilePictureUrl = authState.User.ProfilePictureUrl,
                CreatedAt = authState.User.CreatedAt,
                UpdatedAt = authState.User.UpdatedAt
            };
        }

        // Parse tokens to extract claims
        ParseTokenClaims();

        AuthStateService.AuthStateChanged += OnAuthStateChanged;
    }

    private void ParseTokenClaims()
    {
        try
        {
            if (!string.IsNullOrEmpty(authState.AccessToken))
            {
                accessTokenClaims = ParseJwtToken(authState.AccessToken);
            }
            
            // ID token would come from the authentication result - for now using placeholder
            idToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwic3ViIjoidXNlcl8wMUswUUJEN1Q1VFREWFBDQk41OUtERVFQNyIsImF1ZCI6ImNsaWVudF8wMUpYMURRNVFNUjA0NkE1MjdOQlkwTjBINSIsImV4cCI6MTc1MzIyNTEzMiwiaWF0IjoxNzUzMjI0ODMyLCJlbWFpbCI6ImptYXlub3JAamFtYXlub3IuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJKZXJlbXkgTWF5bm9yIiwiZ2l2ZW5fbmFtZSI6IkplcmVteSIsImZhbWlseV9uYW1lIjoiTWF5bm9yIiwicGljdHVyZSI6Imh0dHBzOi8vd29ya29zY2RuLmNvbS9pbWFnZXMvdjEvWUk5cVJ3OG1sNGZJOHlJUmdYelo6ei4uLiJ9.signature";
            if (!string.IsNullOrEmpty(idToken))
            {
                idTokenClaims = ParseJwtToken(idToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing token claims: {ex.Message}");
        }
    }

    private string ParseJwtToken(string token)
    {
        try
        {
            var parts = token.Split('.');
            if (parts.Length != 3) return "Invalid JWT format";

            var payload = parts[1];
            // Add padding if needed
            while (payload.Length % 4 != 0)
            {
                payload += "=";
            }

            var jsonBytes = Convert.FromBase64String(payload);
            var json = System.Text.Encoding.UTF8.GetString(jsonBytes);
            
            // Pretty format the JSON
            var jsonDocument = System.Text.Json.JsonDocument.Parse(json);
            return System.Text.Json.JsonSerializer.Serialize(jsonDocument, new System.Text.Json.JsonSerializerOptions 
            { 
                WriteIndented = true 
            });
        }
        catch
        {
            return "Unable to parse token";
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch
        {
            // Fallback - could implement alternative copy method
        }
    }

    private void StartEdit()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
        // Reset edited profile
        if (authState.User != null)
        {
            editedProfile.FirstName = authState.User.FirstName;
            editedProfile.LastName = authState.User.LastName;
        }
    }

    private async Task SaveProfile()
    {
        isSaving = true;
        try
        {
            // TODO: Implement profile update API call
            await Task.Delay(1000); // Simulate API call
            
            // Update the auth state with new values
            var updatedUser = new UserProfile
            {
                Id = authState.User!.Id,
                Email = authState.User.Email,
                FirstName = editedProfile.FirstName,
                LastName = editedProfile.LastName,
                ProfilePictureUrl = authState.User.ProfilePictureUrl,
                CreatedAt = authState.User.CreatedAt,
                UpdatedAt = DateTime.UtcNow
            };
            
            await AuthStateService.SetAuthenticatedAsync(updatedUser, authState.AccessToken!, authState.TokenExpiresAt!.Value);
            isEditing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void OnOrganizationChange(ChangeEventArgs e)
    {
        var selectedOrgId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedOrgId))
        {
            // TODO: Implement organization switch - exchange current token for new organization token
            Console.WriteLine($"Switching to organization: {selectedOrgId}");
            
            // For now, just update the current organization display
            var selectedOrg = availableOrganizations.FirstOrDefault(o => o.Id == selectedOrgId);
            if (selectedOrg != null)
            {
                currentOrganization = selectedOrg;
                StateHasChanged();
            }
        }
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(() =>
        {
            authState = AuthStateService.GetAuthState();
            StateHasChanged();
        });
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthStateService.AuthStateChanged -= OnAuthStateChanged;
    }

    private class Organization
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}