@using Nyssa.Wasm.Features.Authentication
@inject AuthenticationStateService AuthStateService
@inject OidcAuthenticationService AuthService
@inject NavigationManager Navigation
@implements IDisposable

@if (authState.IsAuthenticated && authState.User != null)
{
    <!-- User Dropdown -->
    <div class="relative">
        <button @onclick="ToggleDropdown" 
                class="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500">
            @if (!string.IsNullOrEmpty(authState.User.ProfilePictureUrl))
            {
                <img class="w-8 h-8 rounded-full border-2 border-gray-200" 
                     src="@authState.User.ProfilePictureUrl" 
                     alt="Profile picture" />
            }
            else
            {
                <div class="w-8 h-8 bg-indigo-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                    @authState.User.Initials
                </div>
            }
            <span class="hidden md:block text-gray-700 font-medium">@authState.User.FirstName</span>
            <svg class="w-4 h-4 text-gray-500 transform transition-transform @(isDropdownOpen ? "rotate-180" : "")" 
                 fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
        </button>

        @if (isDropdownOpen)
        {
            <!-- Dropdown Menu -->
            <div class="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50">
                <!-- User Info Section -->
                <div class="px-4 py-3 border-b border-gray-100">
                    <div class="flex items-center gap-3">
                        @if (!string.IsNullOrEmpty(authState.User.ProfilePictureUrl))
                        {
                            <img class="w-10 h-10 rounded-full" 
                                 src="@authState.User.ProfilePictureUrl" 
                                 alt="Profile picture" />
                        }
                        else
                        {
                            <div class="w-10 h-10 bg-indigo-500 rounded-full flex items-center justify-center text-white font-semibold">
                                @authState.User.Initials
                            </div>
                        }
                        <div class="flex-1 min-w-0">
                            <p class="text-sm font-medium text-gray-900 truncate">@authState.User.FullName</p>
                            <p class="text-xs text-gray-500 truncate">@authState.User.Email</p>
                        </div>
                    </div>
                </div>

                <!-- Menu Items -->
                <div class="py-1">
                    <button @onclick="GoToProfile" 
                            class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-3">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        View Profile
                    </button>
                    
                    <button @onclick="GoToSettings" 
                            class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-3">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Settings
                    </button>

                    <hr class="my-1 border-gray-200" />

                    <button @onclick="Logout" 
                            class="w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-red-50 flex items-center gap-3">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        Sign Out
                    </button>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Login Button -->
    <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition" @onclick="Login">
        Login / Signup
    </button>
}

@code {
    private AuthenticationState authState = new();
    private bool isDropdownOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await AuthStateService.InitializeAsync();
        authState = AuthStateService.GetAuthState();
        AuthStateService.AuthStateChanged += OnAuthStateChanged;

        // Close dropdown when clicking outside
        await Task.Run(async () =>
        {
            await Task.Delay(100); // Small delay to ensure JS is ready
            try
            {
                await JSRuntime.InvokeVoidAsync("addClickOutsideHandler", DotNetObjectReference.Create(this));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to add click outside handler: {ex.Message}");
            }
        });
    }

    private void OnAuthStateChanged()
    {
        authState = AuthStateService.GetAuthState();
        InvokeAsync(StateHasChanged);
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    [JSInvokable]
    public void CloseDropdown()
    {
        if (isDropdownOpen)
        {
            isDropdownOpen = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task Login()
    {
        await AuthService.LoginAsync();
    }

    private async Task Logout()
    {
        isDropdownOpen = false;
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    private void GoToProfile()
    {
        isDropdownOpen = false;
        Navigation.NavigateTo("/profile");
    }

    private void GoToSettings()
    {
        isDropdownOpen = false;
        // Navigate to settings page when implemented
        // Navigation.NavigateTo("/settings");
    }

    public void Dispose()
    {
        AuthStateService.AuthStateChanged -= OnAuthStateChanged;
    }
}

<script>
    window.addClickOutsideHandler = (dotNetObject) => {
        document.addEventListener('click', function(event) {
            // Check if click is outside the dropdown
            const dropdown = event.target.closest('.relative');
            if (!dropdown) {
                dotNetObject.invokeMethodAsync('CloseDropdown');
            }
        });
    };
</script>

@inject IJSRuntime JSRuntime