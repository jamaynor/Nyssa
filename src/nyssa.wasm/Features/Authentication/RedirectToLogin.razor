@inject OidcAuthenticationService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateService AuthStateService
@implements IDisposable

@code {
    private bool _isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        if (_isProcessing) return;
        _isProcessing = true;

        try
        {
            // First check if we're already authenticated
            var isAuthenticated = await AuthStateService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                Navigation.NavigateTo("/app", replace: true);
                return;
            }

            // Check if this is a callback URL - if so, redirect to callback handler
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            if (query["code"] != null || query["error"] != null)
            {
                Navigation.NavigateTo("/auth/callback" + uri.Query, replace: true);
                return;
            }
            
            // Not authenticated and not a callback, redirect to login
            await AuthService.LoginAsync();
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    public void Dispose()
    {
    }
}

<div class="min-h-screen flex items-center justify-center bg-gray-50">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Signing you in...
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Please wait while we redirect you to the login page.
            </p>
        </div>
        <div class="flex justify-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
        </div>
    </div>
</div>